import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as r,b as s,e as a,f as n,w as o,d as e,r as i}from"./app.ce144736.js";const d={},u=e('<h2 id="serverurl" tabindex="-1"><a class="header-anchor" href="#serverurl" aria-hidden="true">#</a> serverURL</h2><ul><li>Type: <code>string</code></li><li>Required: Yes</li></ul><p>Waline server address url</p><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h2><ul><li>Type: <code>string</code></li><li>Default: <code>window.location.pathname</code></li></ul><p>Article path id. Used to distinguish different <em>article pages</em> to ensure loading the correct comment list under the <em>article page</em>.</p><div class="custom-container warning"><p class="custom-container-title">Note</p><p>Please ensure the uniqueness of each <em>article page</em> path, otherwise the same comment list may be loaded .</p><ul><li>e.g. 1: If on your site <code>/example/path/</code> and <code>/example/path</code> is the same page, you should probably set <code>window.location.pathname.replace(/\\/$/,&#39;&#39;)</code>.</li><li>e.g. 2: If you store en docs at root, while serve other language docs at <code>/zh/</code>, <code>/ja/</code>, etc, you should probably set <code>window.location.pathname.replace(/^\\/(fr|jp|zh)\\//, &#39;/&#39;)</code>.</li></ul></div><h2 id="lang" tabindex="-1"><a class="header-anchor" href="#lang" aria-hidden="true">#</a> lang</h2>',8),m=s("li",null,[a("Type: "),s("code",null,"string")],-1),h=s("li",null,[a("Default: "),s("code",null,"'zh-CN'")],-1),g=e('<p>Display language.</p><p>Optional value:</p><ul><li><code>&#39;zh&#39;</code></li><li><code>&#39;zh-CN&#39;</code></li><li><code>&#39;zh-TW&#39;</code></li><li><code>&#39;en&#39;</code></li><li><code>&#39;en-US&#39;</code></li><li><code>&#39;jp&#39;</code></li><li><code>&#39;jp-JP&#39;</code></li><li><code>&#39;pt-BR&#39;</code></li><li><code>&#39;ru&#39;</code></li><li><code>&#39;ru-RU&#39;</code></li></ul><h2 id="emoji" tabindex="-1"><a class="header-anchor" href="#emoji" aria-hidden="true">#</a> emoji</h2>',4),k=e(`<li><p>Type: <code>(string | WalineEmojiInfo)[] | false</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineEmojiPresets</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">WalineEmojiInfo</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * Emoji name show on tab
   */</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Current folder link
   */</span>
  folder<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Common prefix of Emoji icons
   */</span>
  prefix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Type of Emoji icons, will be regarded as file extension
   */</span>
  type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Emoji icon show on tab
   */</span>
  icon<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Emoji image list
   */</span>
  items<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>Default: <code>[&#39;//unpkg.com/@waline/emojis@1.1.0/weibo&#39;]</code></p></li>`,2),y=s("p",null,"Details:",-1),f=e('<p>Emoji settings.</p><h2 id="dark" tabindex="-1"><a class="header-anchor" href="#dark" aria-hidden="true">#</a> dark</h2><ul><li>Type: <code>string | boolean</code></li><li>Default: <code>false</code></li></ul><p>Darkmode support</p><ul><li>Setting a boolean will set the dark mode according to its value.</li><li>Set it to <code>&#39;auto&#39;</code> will display darkmode due to device settings.</li><li>Filling in a CSS selector will enable darkmode only when the selector match waline ancestor nodes.</li></ul><div class="custom-container tip"><p class="custom-container-title">Examples</p><ul><li><p><strong>Docusaurus</strong>: It will enable darkmode by setting <code>data-theme=&quot;dark&quot;</code> on the <code>&lt;html&gt;</code> tag itself. So you need to set <code>&#39;html[data-theme=&quot;dark&quot;]&#39;</code> as <code>dark</code> option.</p></li><li><p><strong>hexo-theme-fluid</strong>: It will enable darkmode by setting <code>data-user-color-scheme=&quot;dark&quot;</code> on the <code>&lt;html&gt;</code> tag itself. So you need to set <code>&#39;html[data-user-color-scheme=&quot;dark&quot;]&#39;</code> as <code>dark</code> option.</p></li><li><p><strong>vuepress-theme-hope</strong>: It will enable darkmode by setting <code>theme-dark</code> class on the <code>&lt;body&gt;</code> tag itself. So you need to set <code>&#39;body.theme-dark&#39;</code> as <code>dark</code> option.</p></li></ul></div>',6),b=e('<h2 id="commentsorting" tabindex="-1"><a class="header-anchor" href="#commentsorting" aria-hidden="true">#</a> commentSorting</h2><ul><li>Type: <code>WalineCommentSorting</code></li><li>Default: <code>&#39;latest&#39;</code></li></ul><p>Comment list sorting methods. Optional values: <code>&#39;latest&#39;</code>, <code>&#39;oldest&#39;</code>, <code>&#39;hottest&#39;</code></p><h2 id="meta" tabindex="-1"><a class="header-anchor" href="#meta" aria-hidden="true">#</a> meta</h2><ul><li>Type: <code>string[]</code></li><li>Default: <code>[&#39;nick&#39;,&#39;mail&#39;,&#39;link&#39;]</code></li></ul><p>Reviewer attributes. Optional values: <code>&#39;nick&#39;</code>, <code>&#39;mail&#39;</code>, <code>&#39;link&#39;</code></p><h2 id="requiredmeta" tabindex="-1"><a class="header-anchor" href="#requiredmeta" aria-hidden="true">#</a> requiredMeta</h2><ul><li>Type: <code>string[]</code></li><li>Default: <code>[]</code></li></ul><p>Set required fields, default anonymous, optional values:</p><ul><li><code>[]</code></li><li><code>[&#39;nick&#39;]</code></li><li><code>[&#39;nick&#39;,&#39;mail&#39;]</code></li></ul><h2 id="login" tabindex="-1"><a class="header-anchor" href="#login" aria-hidden="true">#</a> login</h2><ul><li>Type: <code>string</code></li><li>Default value: <code>&#39;enable&#39;</code></li></ul><p>Login mode status, optional values:</p><ul><li><code>&#39;enable&#39;</code>: enable login (default)</li><li><code>&#39;disable&#39;</code>: Login is disabled, users should fill in information to comment</li><li><code>&#39;force&#39;</code>: Forced login, users must login to comment</li></ul><h2 id="wordlimit" tabindex="-1"><a class="header-anchor" href="#wordlimit" aria-hidden="true">#</a> wordLimit</h2><ul><li>Type: <code>number | [number, number]</code></li><li>Default: <code>0</code></li></ul><p>Comment word s limit. When a single number is filled in, it &#39;s the maximum number of comment words. No limit when set to <code>0</code>.</p><h2 id="pagesize" tabindex="-1"><a class="header-anchor" href="#pagesize" aria-hidden="true">#</a> pageSize</h2><ul><li>Type: <code>number</code></li><li>Default: <code>10</code></li></ul><p>number of comments per page.</p><h2 id="imageuploader" tabindex="-1"><a class="header-anchor" href="#imageuploader" aria-hidden="true">#</a> imageUploader</h2>',21),x=e(`<li><p>Type: <code>WalineImageUploader | false</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineImageUploader</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>Required: No</p></li>`,2),v=s("p",null,"Details:",-1),w=s("p",null,[a("Custom image upload method. The default behavior is to embed images Base 64 encoded, you can set this to "),s("code",null,"false"),a(" to disable image uploading.")],-1),_=s("p",null,"The function should receive an image object and return a Promise that provides the image address.",-1),T=s("h2",{id:"highlighter",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#highlighter","aria-hidden":"true"},"#"),a(" highlighter")],-1),C=e(`<li><p>Type: <code>WalineHighlighter | false</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineHighlighter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lang<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>Required: No</p></li>`,2),j=s("p",null,"Details:",-1),W=s("p",null,[s("strong",null,"Code highlighting"),a(", use "),s("code",null,"hanabi"),a(" by default. The function passes in original content of code block and language of the code block. You should return a string directly.")],-1),D=s("p",null,[a("You can pass in a code highlighter of your own, or set to "),s("code",null,"false"),a(" to disable code highlighting.")],-1),S=s("h2",{id:"texrenderer",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#texrenderer","aria-hidden":"true"},"#"),a(" texRenderer")],-1),E=e(`<li><p>Type: <code>WalineTexRenderer | false</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineTexRenderer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockMode<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> tex<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>Required: No</p></li>`,2),M=s("p",null,"Details:",-1),R=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"TeX")]),s("annotation",{encoding:"application/x-tex"},"\\TeX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8988em","vertical-align":"-0.2155em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textrm"},"T"),s("span",{class:"mspace",style:{"margin-right":"-0.1667em"}}),s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4678em"}},[s("span",{style:{top:"-2.7845em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord textrm"},"E")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2155em"}},[s("span")])])]),s("span",{class:"mspace",style:{"margin-right":"-0.125em"}}),s("span",{class:"mord textrm"},"X")])])])],-1),I={href:"https://www.mathjax.org/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://katex.org/",target:"_blank",rel:"noopener noreferrer"},X=s("p",null,[a("Customize "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"TeX")]),s("annotation",{encoding:"application/x-tex"},"\\TeX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8988em","vertical-align":"-0.2155em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textrm"},"T"),s("span",{class:"mspace",style:{"margin-right":"-0.1667em"}}),s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4678em"}},[s("span",{style:{top:"-2.7845em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord textrm"},"E")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2155em"}},[s("span")])])]),s("span",{class:"mspace",style:{"margin-right":"-0.125em"}}),s("span",{class:"mord textrm"},"X")])])])]),a(" rendering, the default behavior is to prompt that the preview mode does not support "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"TeX")]),s("annotation",{encoding:"application/x-tex"},"\\TeX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8988em","vertical-align":"-0.2155em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textrm"},"T"),s("span",{class:"mspace",style:{"margin-right":"-0.1667em"}}),s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4678em"}},[s("span",{style:{top:"-2.7845em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord textrm"},"E")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2155em"}},[s("span")])])]),s("span",{class:"mspace",style:{"margin-right":"-0.125em"}}),s("span",{class:"mord textrm"},"X")])])])]),a(". The function provides two parameters, the first parameter indicates whether it should be rendered in block level, and the second parameter is the string of the "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"TeX")]),s("annotation",{encoding:"application/x-tex"},"\\TeX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8988em","vertical-align":"-0.2155em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textrm"},"T"),s("span",{class:"mspace",style:{"margin-right":"-0.1667em"}}),s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4678em"}},[s("span",{style:{top:"-2.7845em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord textrm"},"E")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2155em"}},[s("span")])])]),s("span",{class:"mspace",style:{"margin-right":"-0.125em"}}),s("span",{class:"mord textrm"},"X")])])])]),a(" content, and return a HTML string as render result.")],-1),z=s("p",null,[a("You can import "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"TeX")]),s("annotation",{encoding:"application/x-tex"},"\\TeX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8988em","vertical-align":"-0.2155em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textrm"},"T"),s("span",{class:"mspace",style:{"margin-right":"-0.1667em"}}),s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4678em"}},[s("span",{style:{top:"-2.7845em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord textrm"},"E")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2155em"}},[s("span")])])]),s("span",{class:"mspace",style:{"margin-right":"-0.125em"}}),s("span",{class:"mord textrm"},"X")])])])]),a(" renderer to provide preview feature. We recommend you to use Katex or MathJax, or you can set to "),s("code",null,"false"),a(" to disable parsing "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"TeX")]),s("annotation",{encoding:"application/x-tex"},"\\TeX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8988em","vertical-align":"-0.2155em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textrm"},"T"),s("span",{class:"mspace",style:{"margin-right":"-0.1667em"}}),s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4678em"}},[s("span",{style:{top:"-2.7845em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord textrm"},"E")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2155em"}},[s("span")])])]),s("span",{class:"mspace",style:{"margin-right":"-0.125em"}}),s("span",{class:"mord textrm"},"X")])])])]),a(".")],-1),L=e(`<h2 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search</h2><ul><li><p>Type: <code>WalineSearchOptions | false</code></p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">WalineSearchImageData</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * Image link
   */</span>
  src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Image title
   *
   * <span class="token keyword">@description</span> Used for alt attribute of image
   */</span>
  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Image preview link
   *
   * <span class="token keyword">@description</span> For better loading performance, we will use this thumbnail first in the list
   *
   * <span class="token keyword">@default</span> src
   */</span>
  preview<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">WalineSearchResult</span> <span class="token operator">=</span> WalineSearchImageData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">WalineSearchOptions</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * Search action
   */</span>
  <span class="token function-variable function">search</span><span class="token operator">:</span> <span class="token punctuation">(</span>word<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>WalineSearchResult<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Default result when opening list
   *
   * <span class="token keyword">@default</span> () =&gt; search(&#39;&#39;)
   */</span>
  <span class="token keyword">default</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>WalineSearchResult<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * Fetch more action
   *
   * <span class="token keyword">@description</span> It will be triggered when the list scrolls to the bottom. If your search service supports paging, you should set this to achieve infinite scrolling
   *
   * <span class="token keyword">@default</span> (word) =&gt; search(word)
   */</span>
  more<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>word<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> currentCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>WalineSearchResult<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>Required: No</p></li><li><p>Details:</p></li></ul><p>Customize search features, you can disable search function by setting it to <code>false</code>.</p><h2 id="copyright" tabindex="-1"><a class="header-anchor" href="#copyright" aria-hidden="true">#</a> copyright</h2><ul><li>Type: <code>boolean</code></li><li>Default: <code>true</code></li></ul><p>Whether show copyright and version in footer.</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>We hope you can keep it on to support Waline.</p></div><h2 id="recaptchav3key" tabindex="-1"><a class="header-anchor" href="#recaptchav3key" aria-hidden="true">#</a> recaptchaV3Key</h2><ul><li>Type: <code>string</code></li><li>Required: No</li></ul><p>reCAPTCHA V3 is a captcha service provided by Google. You can add reCAPTCHA V3 site key with <code>recaptchaV3Key</code> to enable it. Notice you should also set environment variable <code>RECAPTCHA_V3_SECRET</code> for server.</p><h2 id="reaction" tabindex="-1"><a class="header-anchor" href="#reaction" aria-hidden="true">#</a> reaction</h2><ul><li>Type: <code>boolean | string[]</code></li><li>Default: <code>false</code></li></ul><p>Add emoji interaction function to the article, set it to <code>true</code> to provide the default emoji, you can also customize the emoji image by setting the emoji url array, and supports a maximum of 8 emojis.</p>`,13);function N(P,U){const t=i("RouterLink"),l=i("ExternalLinkIcon");return c(),r("div",null,[u,s("ul",null,[m,h,s("li",null,[a("Details: "),s("ul",null,[s("li",null,[n(t,{to:"/en/guide/features/i18n.html#set-language"},{default:o(()=>[a("Guide → I18n")]),_:1})])])])]),g,s("ul",null,[k,s("li",null,[y,s("ul",null,[s("li",null,[n(t,{to:"/en/guide/features/emoji.html"},{default:o(()=>[a("Guide → Emoji")]),_:1})])])])]),f,s("p",null,[a("For details of custom style and darkmode, please see "),n(t,{to:"/en/guide/features/style.html"},{default:o(()=>[a("Custom Style")]),_:1}),a(".")]),b,s("ul",null,[x,s("li",null,[v,s("ul",null,[s("li",null,[n(t,{to:"/en/cookbook/customize/upload-image.html"},{default:o(()=>[a("Cookbook → Upload Image")]),_:1})])])])]),w,_,T,s("ul",null,[C,s("li",null,[j,s("ul",null,[s("li",null,[n(t,{to:"/en/cookbook/customize/highlighter.html"},{default:o(()=>[a("Cookbook → Customize Highlighter")]),_:1})])])])]),W,D,S,s("ul",null,[E,s("li",null,[M,s("ul",null,[s("li",null,[n(t,{to:"/en/cookbook/customize/tex-renderer.html"},{default:o(()=>[a("Cookbook → Customize "),R,a(" Renderer")]),_:1})]),s("li",null,[s("a",I,[a("MathJax"),n(l)])]),s("li",null,[s("a",q,[a("KaTeX"),n(l)])])])])]),X,z,L])}const H=p(d,[["render",N],["__file","props.html.vue"]]);export{H as default};
