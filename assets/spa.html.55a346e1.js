import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as a,e as t}from"./app.3c01451d.js";const o={},s=t(`<p>Waline brings support for SPA (<strong>S</strong>ingle <strong>P</strong>age <strong>A</strong> application).</p><h2 id="vue-component" tabindex="-1"><a class="header-anchor" href="#vue-component" aria-hidden="true">#</a> Vue Component</h2><p>If you are building a Vue project, you can use Waline components by importing <code>@waline/client/dist/components</code>.</p><p>All component properties are reactive, which means that when you change the properties, the comment box will get an automatically update.</p><h2 id="other-projects" tabindex="-1"><a class="header-anchor" href="#other-projects" aria-hidden="true">#</a> Other projects</h2><p>In other SPA, you need to store the <code>WalineInstance</code> returned by the Waline function when Waline is initialized.</p><p>You can find an instance property <code>el</code> and two methods: <code>update()</code> and <code>destroy()</code> on <code>WalineInstance</code>.</p><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update</h3><p>You can call <code>update()</code>to update Waline at any time (e.g.: when user visite a new route). The <code>update</code> method receives an optional parameter <code>options</code>, except for <code>el</code>, other Waline initial options can be updated by passing in new values.</p><p>E.g.:</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// in \`/\` route</span>
<span class="token keyword">const</span> waline <span class="token operator">=</span> Waline<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">serverURL</span><span class="token operator">:</span> <span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* User: after some time, route has changed to \`/a.html\` */</span>

waline<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Now waline will start clear the comment and show a loading state.</span>
<span class="token comment">// After some time, the counter and comments will be all updated</span>

waline<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token string">&#39;disable&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// waline will now display in English, and disable user login</span>
</code></pre></div><h4 id="working-principle" tabindex="-1"><a class="header-anchor" href="#working-principle" aria-hidden="true">#</a> Working Principle</h4><p>When calling <code>update</code>, the current option and history option will be merged by <strong>shallow copy</strong>, and Waline instance will refresh with the new option (and save the new option).</p><p>The default behavior of this method is to always <strong>regenerate default values</strong> for options that haven&#39;t been set yet, and <strong>use historical values</strong> for options that have been set.</p><p>There are two options you may need to pay special attention to: <code>path</code> and <code>locale</code>.</p><div class="custom-container warning"><p class="custom-container-title">Path precautions</p><p>In V2, the <code>path</code> parameter <strong>always reset</strong> on <code>update()</code>.</p><p>This means that in any update as long as you don&#39;t specify <code>path</code>, <code>path</code> will be reset to <code>window.location.pathname</code>.</p></div><div class="custom-container warning"><p class="custom-container-title">locale precautions</p><p>Due to the shallow copy, the old <code>locale</code> options are completely overwritten by the new <code>locale</code> options passed in by <code>update</code>.</p><p>Our point is: users usually want to switch the display language when updating the locale, so we set it as the expected behavior of the plugin. This also means that you can use <code>update({ locale: {} })</code> to clear the custom locale config in history.</p><p>If you really need to update one or more certain fields in <code>locale</code>, you need to pass the entire updated <code>locale</code>.</p></div><p>Meanwhile, the <code>update()</code> option has been optimized for asynchronous network requests, including:</p><ul><li>Refresh the comment area and re-request only when the path does change</li><li>The new <code>update()</code> call will automatically terminate the no longer needed request from the previous <code>update()</code>.</li></ul><h3 id="el" tabindex="-1"><a class="header-anchor" href="#el" aria-hidden="true">#</a> el</h3><p>The <code>el</code> property is the HTMLElement mounted by the current instance of Waline.</p><p>If you initialize Waline with <code>el: null</code> (only use comments and pageview statistics), this property will be <code>null</code>.</p><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>If you forget to pass in the <code>serverURL</code> or Waline cannot find the mount location via the <code>el</code> option on the page, Waline will throw an Error indicating the reason for the error.</p><h3 id="initialization-failure" tabindex="-1"><a class="header-anchor" href="#initialization-failure" aria-hidden="true">#</a> Initialization Failure</h3><p>If you forget to set <code>serverURL</code> or Waline cannot find the mount location through the <code>el</code> option on the page, Waline will return a <code>WalineErrorInstance</code>.</p><p>There is only one attribute <code>errMsg</code> on <code>WalineErrorInstance</code> to indicate the reason for the initialization failure.</p><h3 id="precautions" tabindex="-1"><a class="header-anchor" href="#precautions" aria-hidden="true">#</a> Precautions</h3><div class="custom-container warning"><p class="custom-container-title">Remember to destory the instance</p><p>In order for Waline to properly release resources, please manually call <code>WalineInstance.destroy()</code> before removing the element where Waline is mounted.</p><p>Otherwise, some listeners may not be removed properly.</p></div>`,29),i=[s];function c(p,r){return n(),a("div",null,i)}const u=e(o,[["render",c],["__file","spa.html.vue"]]);export{u as default};
