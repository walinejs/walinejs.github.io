import{r as i,o as r,c,a as e,b as s,w as o,F as p,e as t,d as a}from"./app.302a1123.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const u={},h=t('<h2 id="serverurl" tabindex="-1"><a class="header-anchor" href="#serverurl" aria-hidden="true">#</a> serverURL</h2><ul><li>Type: <code>string</code></li><li>Required: Yes</li></ul><p>Waline server address url</p><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h2><ul><li>Type: <code>string</code></li><li>Default: <code>window.location.pathname</code></li></ul><p>Article path id. Used to distinguish different <em>article pages</em> to ensure loading the correct comment list under the <em>article page</em>.</p><div class="custom-container warning"><p class="custom-container-title">Note</p><p>Please ensure the uniqueness of each <em>article page</em> path, otherwise the same comment list may be loaded .</p><p>For example: If on your site <code>/example/path/</code> and <code>/example/path</code> is the same page, you should probably set <code>window.location.pathname.replace(/\\/$/,&#39;&#39;)</code>.</p></div><h2 id="lang" tabindex="-1"><a class="header-anchor" href="#lang" aria-hidden="true">#</a> lang</h2><ul><li>Type: <code>string</code></li><li>Default: <code>&#39;zh-CN&#39;</code></li></ul><p>Display language.</p><p>Optional value:</p><ul><li><code>&#39;zh&#39;</code></li><li><code>&#39;zh-CN&#39;</code></li><li><code>&#39;zh-TW&#39;</code></li><li><code>&#39;en&#39;</code></li><li><code>&#39;en-US&#39;</code></li><li><code>&#39;jp&#39;</code></li><li><code>&#39;jp-JP&#39;</code></li></ul>',12),m=a("If you need a custom language, please refer to "),g=a("i18n"),k=a("."),f=e("h2",{id:"emoji",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#emoji","aria-hidden":"true"},"#"),a(" emoji")],-1),b=e("ul",null,[e("li",null,[a("Type: "),e("code",null,"(string | EmojiInfo)[]")]),e("li",null,[a("Default: "),e("code",null,"['https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo']")])],-1),_=a("Emoji settings, for details see "),x=a("Custom Emoji"),y=t('<h2 id="dark" tabindex="-1"><a class="header-anchor" href="#dark" aria-hidden="true">#</a> dark</h2><ul><li>Type: <code>string | boolean</code></li><li>Default: <code>false</code></li></ul><p>Darkmode support</p><ul><li>Setting a boolean will set the dark mode according to its value.</li><li>Set it to <code>&#39;auto&#39;</code> will display darkmode due to device settings.</li><li>Filling in a CSS selector will enable darkmode only when the selector match waline ancestor nodes.</li></ul><div class="custom-container tip"><p class="custom-container-title">Examples</p><ul><li><p><strong>Docusaurus</strong>: It will enable darkmode by setting <code>data-theme=&quot;dark&quot;</code> on the <code>&lt;html&gt;</code> tag itself. So you need to set <code>&#39;html[data-theme=&quot;dark&quot;]&#39;</code> as <code>dark</code> option.</p></li><li><p><strong>hexo-theme-fluid</strong>: It will enable darkmode by setting <code>data-user-color-scheme=&quot;dark&quot;</code> on the <code>&lt;html&gt;</code> tag itself. So you need to set <code>&#39;html[data-user-color-scheme=&quot;dark&quot;]&#39;</code> as <code>dark</code> option.</p></li><li><p><strong>vuepress-theme-hope</strong>: It will enable darkmode by setting <code>theme-dark</code> class on the <code>&lt;body&gt;</code> tag itself. So you need to set <code>&#39;body.theme-dark&#39;</code> as <code>dark</code> option.</p></li></ul></div>',5),v=a("For details of custom style and darkmode, please see "),w=a("Custom Style"),T=a("."),q=t(`<h2 id="meta" tabindex="-1"><a class="header-anchor" href="#meta" aria-hidden="true">#</a> meta</h2><ul><li>Type: <code>string[]</code></li><li>Default: <code>[&#39;nick&#39;,&#39;mail&#39;,&#39;link&#39;]</code></li></ul><p>Reviewer attributes. Optional values: <code>&#39;nick&#39;</code>, <code>&#39;mail&#39;</code>, <code>&#39;link&#39;</code></p><h2 id="requiredmeta" tabindex="-1"><a class="header-anchor" href="#requiredmeta" aria-hidden="true">#</a> requiredMeta</h2><ul><li>Type: <code>string[]</code></li><li>Default: <code>[]</code></li></ul><p>Set required fields, default anonymous, optional values:</p><ul><li><code>[]</code></li><li><code>[&#39;nick&#39;]</code></li><li><code>[&#39;nick&#39;,&#39;mail&#39;]</code></li></ul><h2 id="login" tabindex="-1"><a class="header-anchor" href="#login" aria-hidden="true">#</a> login</h2><ul><li>Type: <code>string</code></li><li>Default value: <code>&#39;enable&#39;</code></li></ul><p>Login mode status, optional values:</p><ul><li><code>&#39;enable&#39;</code>: enable login (default)</li><li><code>&#39;disable&#39;</code>: Login is disabled, users should fill in infomation to comment</li><li><code>&#39;force&#39;</code>: Forced login, users must login to comment</li></ul><h2 id="wordlimit" tabindex="-1"><a class="header-anchor" href="#wordlimit" aria-hidden="true">#</a> wordLimit</h2><ul><li>Type: <code>number | [number, number]</code></li><li>Default: <code>0</code></li></ul><p>Comment word s limit. When a single number is filled in, it &#39;s the maximum number of comment words. No limit when set to <code>0</code>.</p><h2 id="pagesize" tabindex="-1"><a class="header-anchor" href="#pagesize" aria-hidden="true">#</a> pageSize</h2><ul><li>Type: <code>number</code></li><li>Default: <code>10</code></li></ul><p>number of comments per page.</p><h2 id="imageuploader" tabindex="-1"><a class="header-anchor" href="#imageuploader" aria-hidden="true">#</a> imageUploader</h2><ul><li><p>Type: <code>WalineImageUploader | false</code></p></li><li><p>Required: No</p></li><li><p>Details:</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineImageUploader</span> <span class="token operator">=</span> <span class="token punctuation">(</span>image<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre></div></li></ul><p>Custom image upload method. The function should receive an image object and return a Promise that provides the image address.</p><p>The default behavior is to embed images Base 64 encoded, you can set this to <code>false</code> to disable image uploading.</p><h2 id="highlighter" tabindex="-1"><a class="header-anchor" href="#highlighter" aria-hidden="true">#</a> highlighter</h2><ul><li><p>Type: <code>WalineHighlighter | false</code></p></li><li><p>Required: No</p></li><li><p>Details:</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineHighlighter</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lang<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>
      code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
      lang<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
      callback<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> code<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li></ul><p><strong>Code highlighting</strong>, use <code>hanabi</code> by default. The function passes in original content of code block and language of the code block. You should trigger the callback function or return a string directly.</p><p>You can pass in a code highlighter of your own, or set to <code>false</code> to disable code highlighting.</p><h2 id="texrenderer" tabindex="-1"><a class="header-anchor" href="#texrenderer" aria-hidden="true">#</a> texRenderer</h2><ul><li><p>Type: <code>WalineTexRenderer | false</code></p></li><li><p>Required: No</p></li><li><p>Details:</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WalineTexRenderer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockMode<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> tex<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre></div></li></ul>`,27),D=e("p",null,[a("Customize "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mtext",null,"TeX")]),e("annotation",{encoding:"application/x-tex"},"\\TeX")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8988em","vertical-align":"-0.2155em"}}),e("span",{class:"mord text"},[e("span",{class:"mord textrm"},"T"),e("span",{class:"mspace",style:{"margin-right":"-0.1667em"}}),e("span",{class:"vlist-t vlist-t2"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.4678em"}},[e("span",{style:{top:"-2.7845em"}},[e("span",{class:"pstrut",style:{height:"3em"}}),e("span",{class:"mord"},[e("span",{class:"mord textrm"},"E")])])]),e("span",{class:"vlist-s"},"\u200B")]),e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.2155em"}},[e("span")])])]),e("span",{class:"mspace",style:{"margin-right":"-0.125em"}}),e("span",{class:"mord textrm"},"X")])])])]),a(" rendering, the default behavior is to prompt that the preview mode does not support "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mtext",null,"TeX")]),e("annotation",{encoding:"application/x-tex"},"\\TeX")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8988em","vertical-align":"-0.2155em"}}),e("span",{class:"mord text"},[e("span",{class:"mord textrm"},"T"),e("span",{class:"mspace",style:{"margin-right":"-0.1667em"}}),e("span",{class:"vlist-t vlist-t2"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.4678em"}},[e("span",{style:{top:"-2.7845em"}},[e("span",{class:"pstrut",style:{height:"3em"}}),e("span",{class:"mord"},[e("span",{class:"mord textrm"},"E")])])]),e("span",{class:"vlist-s"},"\u200B")]),e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.2155em"}},[e("span")])])]),e("span",{class:"mspace",style:{"margin-right":"-0.125em"}}),e("span",{class:"mord textrm"},"X")])])])]),a(". The function provides two parameters, the first parameter indicates whether it should be rendered in block level, and the second parameter is the string of the "),e("span",{class:"katex-error",title:"ParseError: KaTeX parse error: Undefined control sequence: \\Tex at position 1: \\\u0332T\u0332e\u0332x\u0332"},"\\Tex"),a(" content, and return a HTML string as render result.")],-1),j=a("You can import "),W=e("span",{class:"katex-error",title:"ParseError: KaTeX parse error: Undefined control sequence: \\Tex at position 1: \\\u0332T\u0332e\u0332x\u0332"},"\\Tex",-1),E=a(" renderer to provide preview feature. We recommend you to use Katex or MathJax, or you can set to "),I=e("code",null,"false",-1),S=a(" to disable parsing "),C=e("span",{class:"katex-error",title:"ParseError: KaTeX parse error: Undefined control sequence: \\Tex at position 1: \\\u0332T\u0332e\u0332x\u0332"},"\\Tex",-1),L=a(". For more information, please refer to "),M={href:"https://katex.org/docs/api.html#server-side-rendering-or-rendering-to-a-string",target:"_blank",rel:"noopener noreferrer"},N=a("KaTeX API"),R=a(" or "),X={href:"http://docs.mathjax.org/en/latest/web/typeset.html#converting-a-math-string-to-other-formats",target:"_blank",rel:"noopener noreferrer"},P=a("MathJax API"),U=a("."),z=t('<h2 id="copyright" tabindex="-1"><a class="header-anchor" href="#copyright" aria-hidden="true">#</a> copyright</h2><ul><li>Type: <code>boolean</code></li><li>Default: <code>true</code></li></ul><p>Whether show copyright and version in footer.</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>We hope you can keep it on to support Waline.</p></div>',4);function F(K,B){const n=i("RouterLink"),l=i("ExternalLinkIcon");return r(),c(p,null,[h,e("p",null,[m,s(n,{to:"/en/guide/client/i18n.html"},{default:o(()=>[g]),_:1}),k]),f,b,e("p",null,[_,s(n,{to:"/en/guide/client/emoji.html"},{default:o(()=>[x]),_:1})]),y,e("p",null,[v,s(n,{to:"/en/guide/client/style.html"},{default:o(()=>[w]),_:1}),T]),q,D,e("p",null,[j,W,E,I,S,C,L,e("a",M,[N,s(l)]),R,e("a",X,[P,s(l)]),U]),z],64)}var A=d(u,[["render",F],["__file","component.html.vue"]]);export{A as default};
