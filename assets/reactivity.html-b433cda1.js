import{_ as n,Y as s,Z as o,$ as t,a0 as a,a2 as e,a1 as c}from"./framework-0d72886b.js";const p={},d=a("p",null,[e("官方客户端 "),a("code",null,"@waline/client"),e(" 基于 Vue3，提供了响应式的组件和实例，为 SPA("),a("strong",null,"S"),e("ingle "),a("strong",null,"P"),e("age "),a("strong",null,"A"),e("pplication, 单页应用) 带来了支持。")],-1),l=c(`<h2 id="vue-组件" tabindex="-1"><a class="header-anchor" href="#vue-组件" aria-hidden="true">#</a> Vue 组件</h2><p>如果你在使用一个 Vue 项目，你可以通过 <code>@waline/client/components</code> 导入命名导出 <code>Waline</code> 来获得并使用 Waline 组件。</p><p>所有组件的属性都是响应式的，这意味着当你更改属性时，评论框会自动更新。</p><h2 id="其他项目" tabindex="-1"><a class="header-anchor" href="#其他项目" aria-hidden="true">#</a> 其他项目</h2><p>在其他单页项目应用中，你需要在初始化 Waline 时保存 Waline 函数返回的 <code>WalineInstance</code> 实例以便后续使用。</p><p>你可以在 <code>WalineInstance</code> 上找到一个实例属性 <code>el</code> 和两个方法: <code>update()</code> 和 <code>destroy()</code>。</p><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update</h3><p>你可以在任何需要的时刻 (如用户前往新页面后) 调用 <code>update()</code> 更新 Waline。<code>update</code> 方法接收一个可选参数 <code>options</code>，除 <code>el</code> 选项外，其他 Waline 初始化选项都可以传入新的值进行更新。</p><p>如:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在 \`/\` 路由</span>
<span class="token keyword">const</span> waline <span class="token operator">=</span> Waline<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">serverURL</span><span class="token operator">:</span> <span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 用户: 一段时间后，路由变动到 \`/a.html\` */</span>

waline<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在 waline 将开始清除评论并显示加载状态</span>
<span class="token comment">// 一段时间后，计数器和评论将全部更新</span>

waline<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token string">&#39;disable&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这将使 Waline 以英文显示，并禁用用户登录</span>
</code></pre></div><h4 id="工作方式" tabindex="-1"><a class="header-anchor" href="#工作方式" aria-hidden="true">#</a> 工作方式</h4><p>调用 <code>update</code> 时，会把当前选项和历史选项<strong>浅拷贝</strong>合并，并重新根据新参数更新整个 Waline 实例 (同时保存这个新参数)。</p><p>该方法的默认行为是: 对于未设置过的参数永远<strong>重新生成默认值</strong>，对于设置过的参数<strong>使用历史值</strong>。</p><p>这里有两个选项你可能需要特别留意: <code>path</code> 和 <code>locale</code>。</p><div class="hint-container warning"><p class="hint-container-title">path 注意事项</p><p>在 V2 中，<code>path</code> 参数在 <code>update()</code> 时<strong>总是被重置</strong>。</p><p>这意味着在任何一次更新中只要你不指定 <code>path</code>，<code>path</code> 就会在被重置为 <code>window.location.pathname</code>。</p></div><div class="hint-container warning"><p class="hint-container-title">locale 注意事项</p><p>由于浅拷贝的关系，旧的 <code>locale</code> 选项会被 <code>update</code> 传入的新 <code>locale</code> 选项完全覆盖。</p><p>我们的依据是: 用户更新 locale 的情景通常是想要进行显示语言的切换，所以我们将其设置为插件的预期行为。这种行为提供了通过 <code>update({ locale: {} })</code> 清除之前设置的自定义语言配置的能力。</p><p>如果你的确需要更新已设置的 <code>locale</code> 的某项或某几项，你需要把 <code>locale</code> 中所有变动的值重新传入插件。</p></div><p>同时，<code>update()</code> 选项已经针对异步网络请求优化，这包括:</p><ul><li>只有当路径的确发生改变时才刷新评论区重新请求</li><li>新的 <code>update()</code> 调用会自动终止上一个 <code>update()</code> 发出的不再需要的请求。</li></ul><h3 id="el" tabindex="-1"><a class="header-anchor" href="#el" aria-hidden="true">#</a> el</h3><p><code>el</code> 属性为 Waline 当前实例挂载的 HTMLElement。</p><p>如果你在初始化时设置了 <code>el: null</code> (即只需要浏览量与评论数功能)，该项为 <code>null</code>。</p><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>你可以使用 <code>destroy()</code> 方法销毁 Waline 实例。它会同时清空 Waline 挂载元素中的全部内容。</p><h3 id="初始化失败" tabindex="-1"><a class="header-anchor" href="#初始化失败" aria-hidden="true">#</a> 初始化失败</h3><p>如果你忘记传入 <code>serverURL</code> 或者 Waline 无法在页面中通过 <code>el</code> 选项找到挂载位置，Waline 会抛出一个 Error 指明错误原因。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><div class="hint-container warning"><p class="hint-container-title">取消挂载实例</p><p>为了让 Waline 能够正确释放资源，请在移除 Waline 所在元素之前，手动调用 <code>WalineInstance.destroy()</code>。</p><p>否则，一些监听器可能不会被正确移除。</p></div>`,27);function i(r,u){return s(),o("div",null,[d,t(" more "),l])}const k=n(p,[["render",i],["__file","reactivity.html.vue"]]);export{k as default};
