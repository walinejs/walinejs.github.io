import{_ as e,X as p,Y as c,Z as r,$ as n,a1 as s,a2 as t,a0 as o,C as l}from"./framework-4b90706e.js";const u={},i=n("p",null,"本教程将指导你如何创建并使用自己的表情预设。",-1),d=o(`<h2 id="创建自己的预设" tabindex="-1"><a class="header-anchor" href="#创建自己的预设" aria-hidden="true">#</a> 创建自己的预设</h2><p>首先，你需要准备一些表情图片，作为你的表情包。接下来，你需要按照步骤完成下列流程。</p><h3 id="为表情包命名并上传" tabindex="-1"><a class="header-anchor" href="#为表情包命名并上传" aria-hidden="true">#</a> 为表情包命名并上传</h3><p>处于简便性的考量，Waline 会将表情图片的名称直接作为表情的 key。这意味着，如果你引入了两个不同的预设，而它们都含有 laugh.png 图片的话，这两个表情会对应同一个表情 <code>:laugh:</code>。</p><p>所以，我们建议的最佳实践是，每个表情预设创作者应该在表情文件的所有名称中，添加一个预设名称相关的前缀。</p><p>将它们妥善命名后，你需要将它们上传到你的服务器。</p><h3 id="编写预设信息" tabindex="-1"><a class="header-anchor" href="#编写预设信息" aria-hidden="true">#</a> 编写预设信息</h3><p>我们假定你已经在 <code>https://example.com</code> 的 <code>my-emoji</code> 目录下放置了一些表情图片，如下所示：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>https://example.com/my-emoji/
  ├─ my_laugh.png
  ├─ my_cute.png
  ├─ my_rage.png
  ├─ my_sob.png
  └─ ...
</code></pre></div><p>此时，你还需要为这个文件夹创建一个 <code>info.json</code> 文件，来让 Waline 知晓 Emoji 预设所包含的表情。</p><p>首先，我们先为 Emoji 预设起一个名称，比如叫 <code>我的 Emoji</code>，由于你已经为图片设置了 <code>my_</code> 前缀，且文件均为 <code>png</code> 格式。你需要将他们添加在 <code>info.json</code> 中。</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;我的 Emoji&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my_&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;png&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>之后，你需要在 <code>items</code> 中按照你希望的顺序列出所有的表情图片名称，同时，请记得忽略你已经在 <code>prefix</code> 和 <code>type</code> 中设置的前缀和后缀。</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;我的 Emoji&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my_&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;png&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;laugh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cute&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sob&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>之后，请选择一个有代表性的表情作为在选项卡中展示的图标:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;我的 Emoji&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my_&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;png&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cute&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;laugh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cute&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样，你就完成了 <code>info.json</code> 的编写，请将它上传到同一个文件夹。</p><p>这样你就成功的创建了一个 <code>my-emoji</code> 预设，地址为 <code>https://example.com/my-emoji/&#39;</code> 预设。</p><h2 id="利用-github-标签与仓库镜像" tabindex="-1"><a class="header-anchor" href="#利用-github-标签与仓库镜像" aria-hidden="true">#</a> 利用 GitHub 标签与仓库镜像</h2><p>通常情况下，你可能会觉得拥有自己的域名并将图片上传到域名有些繁琐，而且链接可能会随时间失效，所以一个进阶的做法是使用 GitHub 仓库，并利用 Git 的标签功能，通过 GitHub 镜像来部署的表情。</p><p>与上面的步骤类似，这次，你需要新建 GitHub 仓库，并将表情按照上述的方法进行命名，使用相同步骤创建 <code>info.json</code>，并将它们上传到仓库中。</p><p>之后，为此时的仓库创建一个标签，我们推荐使用 <code>vx.x.x</code> 的格式进行设置，如 <code>v1.0.0</code>。</p>`,22),k={href:"https://www.jsdelivr.com/",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"https://cdn.jsdelivr.net/gh/user/repo@version/file",-1),q=n("p",null,[s("我们假定你创建了 "),n("code",null,"example/emoji"),s(" 仓库，直接上传了表情图片和 "),n("code",null,"info.json"),s("，并且已经创建了 "),n("code",null,"v1.0.0"),s(" 标签，那么你可以使用 "),n("code",null,"https://cdn.jsdelivr.net/gh/example/emoji@v1.0.0/"),s(" 作为你的预设。")],-1),h={class:"hint-container tip"},m=n("p",{class:"hint-container-title"},"提示",-1),_=n("p",null,"为链接绑定标签是十分必要的，这可以防止因修改你的预设导致历史评论引用的图片链接失效。",-1),y={href:"https://github.com/walinejs/emojis",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"v1.1.0",-1),x=o(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于 cdn.jsdelivr.net 在国内受到污染，你可以将 <code>cdn.jsdelivr.net</code> 换成 <code>gcore.jsdelivr.net</code></p></div><h2 id="使用配置对象" tabindex="-1"><a class="header-anchor" href="#使用配置对象" aria-hidden="true">#</a> 使用配置对象</h2><p>和前文类似，我们假设你有下列文件结构:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>https://example.com/my-emoji/
├─ my_laugh.png
├─ my_cute.png
├─ my_rage.png
└─ my_sob.png
</code></pre></div><p>在创建 <code>info.json</code> 上传并使用链接作为预设之外，你也可以直接使用下列对象作为预设:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;我的 Emoji&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">folder</span><span class="token operator">:</span> <span class="token string">&quot;https://example.com/my-emoji&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&quot;my_&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;png&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">&quot;cute&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;laugh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cute&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这里，我们额外添加了 <code>folder</code> 属性来告知 Waline 图片的存放位置。</p>`,7);function v(f,b){const a=l("ExternalLinkIcon");return p(),c("div",null,[i,r(" more "),d,n("p",null,[s("添加标签后，你可以使用 "),n("a",k,[s("cdn.jsdelivr.net"),t(a)]),s(" 上带有版本的 CDN 链接作为你的预设，其格式为 "),g,s("。")]),q,n("div",h,[m,_,n("p",null,[s("官方的表情包预设，就是通过创建 "),n("a",y,[s("walinejs/emojis"),t(a)]),s(" 仓库，并使用 CDN 链接来实现的。目前我们正在使用 "),j,s(" 版本。")])]),x])}const N=e(u,[["render",v],["__file","emoji.html.vue"]]);export{N as default};
