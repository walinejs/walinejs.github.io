import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as l,c as i,b as n,e as a,f as t,w as e,d as p}from"./app-g0bS3pUN.js";const u={},r=p('<p>你可以在服务端入口文件 <code>index.js</code> 中配置下列选项。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果你使用模板，请额外注意你需要自行保存这些配置，因为它们会在拉取官方最新模板时被覆盖。</p><p>建议将官方最新模板上传到自己的仓库，并进行修改。</p></div><h2 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置"><span>基本配置</span></a></h2><h3 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins"><span>plugins</span></a></h3><ul><li>类型： <code>plugin[]</code></li></ul>',5),d=p(`<h3 id="securedomains" tabindex="-1"><a class="header-anchor" href="#securedomains"><span>secureDomains</span></a></h3><ul><li>类型: <code>string | RegExp | string[] | RegExp[]</code></li></ul><p>安全域名配置。配置后非该域名来源的请求会返回 403 状态码。支持字符串、正则、数组类型，不配置表示允许所有域名来源。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">secureDomains</span><span class="token operator">:</span> <span class="token string">&#39;waline.js.org&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>为了方便本地开发，<code>localhost</code> 和 <code>127.0.0.1</code> 会被默认添加到安全域名列表中。</li><li>当存在该配置时，环境变量 <code>SECURE_DOMAINS</code> 不生效。</li><li>腾讯云开发需要同时在 <code>环境 -&gt; 安全配置 -&gt; WEB 安全域名</code> 中配置安全域名</li></ul></div><h3 id="forbiddenwords" tabindex="-1"><a class="header-anchor" href="#forbiddenwords"><span>forbiddenWords</span></a></h3><ul><li>类型: <code>string[]</code></li></ul><p>违禁词配置，包含违禁词的内容会直接标记为垃圾评论。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">forbiddenWords</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;习近平&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;毛泽东&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="disallowiplist" tabindex="-1"><a class="header-anchor" href="#disallowiplist"><span>disallowIPList</span></a></h3><ul><li>类型: <code>string[]</code></li></ul><p>IP 黑名单配置，名单中的 IP 访问会直接返回 403 错误。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">disallowIPList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;8.8.8.8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4.4.4.4&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="mailsubject" tabindex="-1"><a class="header-anchor" href="#mailsubject"><span>mailSubject</span></a></h3><ul><li>类型: <code>string</code></li></ul><p>评论回复邮件标题自定义，等同于环境变量 <code>MAIL_SUBJECT</code>。</p><h3 id="mailtemplate" tabindex="-1"><a class="header-anchor" href="#mailtemplate"><span>mailTemplate</span></a></h3><ul><li>类型: <code>string</code></li></ul><p>评论回复邮件内容自定义，等同于环境变量 <code>MAIL_TEMPLATE</code>。</p><h3 id="mailsubjectadmin" tabindex="-1"><a class="header-anchor" href="#mailsubjectadmin"><span>mailSubjectAdmin</span></a></h3><ul><li>类型: <code>string</code></li></ul><p>新评论通知邮件标题自定义，等同于环境变量 <code>MAIL_SUBJECT_ADMIN</code>。</p><h3 id="mailtemplateadmin" tabindex="-1"><a class="header-anchor" href="#mailtemplateadmin"><span>mailTemplateAdmin</span></a></h3><ul><li>类型: <code>string</code></li></ul><p>新评论通知邮件内容自定义，等同于环境变量 <code>MAIL_TEMPLATE_ADMIN</code>。</p><h3 id="qqtemplate" tabindex="-1"><a class="header-anchor" href="#qqtemplate"><span>QQTemplate</span></a></h3><ul><li>类型: <code>string</code></li></ul><p>QQ 评论通知模板，等同于环境变量 <code>QQ_TEMPLATE</code>。</p><h3 id="tgtemplate" tabindex="-1"><a class="header-anchor" href="#tgtemplate"><span>TGTemplate</span></a></h3><ul><li>类型: <code>string</code></li></ul><p>Telegram 评论通知模板，等同于环境变量 <code>TG_TEMPLATE</code>。</p><h3 id="sctemplate" tabindex="-1"><a class="header-anchor" href="#sctemplate"><span>SCTemplate</span></a></h3><ul><li>类型: <code>string</code></li></ul><p>Server酱 评论通知模板，等同于环境变量 <code>SC_TEMPLATE</code>。</p><h3 id="model" tabindex="-1"><a class="header-anchor" href="#model"><span>model</span></a></h3><ul><li>类型：<code>class</code></li></ul>`,36),k=n("h3",{id:"encryptpassword",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#encryptpassword"},[n("span",null,"encryptPassword")])],-1),m=n("ul",null,[n("li",null,[a("类型："),n("code",null,"function")])],-1),h=p(`<h2 id="评论-hooks" tabindex="-1"><a class="header-anchor" href="#评论-hooks"><span>评论 Hooks</span></a></h2><p>Waline 提供了一些自定义 Hook，方便用户根据自身业务需求对 Waline 服务端行为进行定制。</p><p>自定义 Hook 在服务端入口文件 <code>index.js</code> 中进行配置。</p><h3 id="presave-comment" tabindex="-1"><a class="header-anchor" href="#presave-comment"><span>preSave(comment)</span></a></h3><p>发布评论前执行的操作。传入评论数据，如果该方法返回内容，则接口会直接返回，不存储评论数据。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">preSave</span><span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isSpam <span class="token operator">=</span> <span class="token keyword">await</span> Akismet<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSpam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">errmsg</span><span class="token operator">:</span> <span class="token string">&#39;这是垃圾邮件!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="postsave-comment-pcomment" tabindex="-1"><a class="header-anchor" href="#postsave-comment-pcomment"><span>postSave(comment, pComment)</span></a></h3><p>评论发布后执行的操作。</p><p>方法执行时会传入评论数据，如果是回复评论的话还会传入父级评论。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">postSave</span><span class="token punctuation">(</span><span class="token parameter">comment<span class="token punctuation">,</span> pComment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">mailto</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">mail</span><span class="token operator">:</span> pComment<span class="token punctuation">.</span>mail<span class="token punctuation">,</span>
      <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>comment<span class="token punctuation">.</span>nick<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 回复了你的评论!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="preupdate-comment" tabindex="-1"><a class="header-anchor" href="#preupdate-comment"><span>preUpdate(comment)</span></a></h3><p>评论内容在后台被更新前执行的操作。如果该方法返回内容，则接口会直接返回，不更新评论数据。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">preUpdate</span><span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;你无法更新评论数据&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="afterupdate-comment" tabindex="-1"><a class="header-anchor" href="#afterupdate-comment"><span>afterUpdate(comment)</span></a></h3><p>评论内容在后台被更新后执行的操作。方法执行时会传入评论数据。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">postUpdate</span><span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>comment<span class="token punctuation">.</span>objectId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 评论已更新!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="predelete-commentid" tabindex="-1"><a class="header-anchor" href="#predelete-commentid"><span>preDelete(commentId)</span></a></h3><p>评论被删除前执行的操作，方法执行时会传入需要操作的评论 Id。如果该方法返回内容，则接口会直接返回，不更新评论数据。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">preDelete</span><span class="token punctuation">(</span><span class="token parameter">commentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Then you can&#39;t delete comment&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="afterdelete-commentid" tabindex="-1"><a class="header-anchor" href="#afterdelete-commentid"><span>afterDelete(commentId)</span></a></h3><p>评论被删除后执行的操作，方法执行时会传入需要操作的评论 Id。</p><details class="hint-container details"><summary>例子</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">postDelete</span><span class="token punctuation">(</span><span class="token parameter">commentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">comment </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>commentId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has been deleted!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></details><h3 id="avatarurl-comment" tabindex="-1"><a class="header-anchor" href="#avatarurl-comment"><span>avatarUrl(comment)</span></a></h3><p>获取头像时执行的操作，方法执行时会传入需要操作的 comment 对象。</p><details class="hint-container details"><summary>例子</summary><p>这是一个实现自动替换使用 QQ 头像的示例函数</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Waline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Waline</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">avatarUrl</span><span class="token punctuation">(</span><span class="token parameter">comment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;(\\\\d+)@qq\\\\.com$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> mail <span class="token operator">=</span> comment<span class="token punctuation">.</span>mail<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> q <span class="token operator">=</span> mail<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@qq\\.com</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string">&#39;https://q1.qlogo.cn/headimg_dl?dst_uin=&#39;</span> <span class="token operator">+</span> q <span class="token operator">+</span> <span class="token string">&#39;&amp;spec=4&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>此方法或传入一个 <code>comment</code> 对象，你可以通过 <code>comment.mail</code> 获取邮箱。若返回值为 string 类型，则会直接调用返回值作为头像地址，否则正常生成 MD5。</p></details>`,25);function g(f,v){const s=c("RouteLink");return l(),i("div",null,[r,n("p",null,[a("详情见 "),t(s,{to:"/reference/server/plugin.html"},{default:e(()=>[a("插件系统")]),_:1})]),d,n("p",null,[a("详情见 "),t(s,{to:"/cookbook/customize/database.html"},{default:e(()=>[a("自定义数据库服务")]),_:1})]),k,m,n("p",null,[a("详情见 "),t(s,{to:"/cookbook/customize/userdb.html"},{default:e(()=>[a("自定义用户系统")]),_:1})]),h])}const j=o(u,[["render",g],["__file","config.html.vue"]]),w=JSON.parse('{"path":"/reference/server/config.html","title":"服务端配置","lang":"zh-CN","frontmatter":{"title":"服务端配置","icon":"config","redirectFrom":"/reference/server.html","description":"你可以在服务端入口文件 index.js 中配置下列选项。 注意 如果你使用模板，请额外注意你需要自行保存这些配置，因为它们会在拉取官方最新模板时被覆盖。 建议将官方最新模板上传到自己的仓库，并进行修改。 基本配置 plugins 类型： plugin[] 详情见 secureDomains 类型: string | RegExp | string[]...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://waline.js.org/en/reference/server/config.html"}],["meta",{"property":"og:url","content":"https://waline.js.org/reference/server/config.html"}],["meta",{"property":"og:site_name","content":"Waline"}],["meta",{"property":"og:title","content":"服务端配置"}],["meta",{"property":"og:description","content":"你可以在服务端入口文件 index.js 中配置下列选项。 注意 如果你使用模板，请额外注意你需要自行保存这些配置，因为它们会在拉取官方最新模板时被覆盖。 建议将官方最新模板上传到自己的仓库，并进行修改。 基本配置 plugins 类型： plugin[] 详情见 secureDomains 类型: string | RegExp | string[]..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-01T02:22:38.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-01T02:22:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"服务端配置\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-01T02:22:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"基本配置","slug":"基本配置","link":"#基本配置","children":[{"level":3,"title":"plugins","slug":"plugins","link":"#plugins","children":[]},{"level":3,"title":"secureDomains","slug":"securedomains","link":"#securedomains","children":[]},{"level":3,"title":"forbiddenWords","slug":"forbiddenwords","link":"#forbiddenwords","children":[]},{"level":3,"title":"disallowIPList","slug":"disallowiplist","link":"#disallowiplist","children":[]},{"level":3,"title":"mailSubject","slug":"mailsubject","link":"#mailsubject","children":[]},{"level":3,"title":"mailTemplate","slug":"mailtemplate","link":"#mailtemplate","children":[]},{"level":3,"title":"mailSubjectAdmin","slug":"mailsubjectadmin","link":"#mailsubjectadmin","children":[]},{"level":3,"title":"mailTemplateAdmin","slug":"mailtemplateadmin","link":"#mailtemplateadmin","children":[]},{"level":3,"title":"QQTemplate","slug":"qqtemplate","link":"#qqtemplate","children":[]},{"level":3,"title":"TGTemplate","slug":"tgtemplate","link":"#tgtemplate","children":[]},{"level":3,"title":"SCTemplate","slug":"sctemplate","link":"#sctemplate","children":[]},{"level":3,"title":"model","slug":"model","link":"#model","children":[]},{"level":3,"title":"encryptPassword","slug":"encryptpassword","link":"#encryptpassword","children":[]}]},{"level":2,"title":"评论 Hooks","slug":"评论-hooks","link":"#评论-hooks","children":[{"level":3,"title":"preSave(comment)","slug":"presave-comment","link":"#presave-comment","children":[]},{"level":3,"title":"postSave(comment, pComment)","slug":"postsave-comment-pcomment","link":"#postsave-comment-pcomment","children":[]},{"level":3,"title":"preUpdate(comment)","slug":"preupdate-comment","link":"#preupdate-comment","children":[]},{"level":3,"title":"afterUpdate(comment)","slug":"afterupdate-comment","link":"#afterupdate-comment","children":[]},{"level":3,"title":"preDelete(commentId)","slug":"predelete-commentid","link":"#predelete-commentid","children":[]},{"level":3,"title":"afterDelete(commentId)","slug":"afterdelete-commentid","link":"#afterdelete-commentid","children":[]},{"level":3,"title":"avatarUrl(comment)","slug":"avatarurl-comment","link":"#avatarurl-comment","children":[]}]}],"git":{"createdTime":1669825130000,"updatedTime":1706754158000,"contributors":[{"name":"Austin Lee","email":"i@imnerd.org","commits":2},{"name":"Albert","email":"linchengweiku@outlook.com","commits":1},{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":1},{"name":"lizheming","email":"i@imnerd.org","commits":1}]},"readingTime":{"minutes":3.66,"words":1098},"filePathRelative":"reference/server/config.md","localizedDate":"2022年11月30日","autoDesc":true}');export{j as comp,w as data};
