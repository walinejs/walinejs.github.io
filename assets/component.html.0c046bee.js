import{_ as d,r as l,o as c,c as r,a as o,b as a,w as i,F as p,e as t,d as e}from"./app.1d47db61.js";const u={},h=t('<h2 id="serverurl" tabindex="-1"><a class="header-anchor" href="#serverurl" aria-hidden="true">#</a> serverURL</h2><ul><li>Type: <code>string</code></li><li>Required: Yes</li></ul><p>Waline server address url</p><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h2><ul><li>Type: <code>string</code></li><li>Default: <code>window.location.pathname</code></li></ul><p>Article path id. Used to distinguish different <em>article pages</em> to ensure loading the correct comment list under the <em>article page</em>.</p><div class="custom-container warning"><p class="custom-container-title">Note</p><p>Please ensure the uniqueness of each <em>article page</em> path, otherwise the same comment list may be loaded .</p><p>For example: If on your site <code>/example/path/</code> and <code>/example/path</code> is the same page, you should probably set <code>window.location.pathname.replace(/\\/$/,&#39;&#39;)</code>.</p></div><h2 id="lang" tabindex="-1"><a class="header-anchor" href="#lang" aria-hidden="true">#</a> lang</h2><ul><li>Type: <code>string</code></li><li>Default: <code>&#39;zh-CN&#39;</code></li></ul><p>Display language.</p><p>Optional value:</p><ul><li><code>&#39;zh&#39;</code></li><li><code>&#39;zh-CN&#39;</code></li><li><code>&#39;zh-TW&#39;</code></li><li><code>&#39;en&#39;</code></li><li><code>&#39;en-US&#39;</code></li><li><code>&#39;jp&#39;</code></li><li><code>&#39;jp-JP&#39;</code></li></ul>',12),m=e("If you need a custom language, please refer to "),g=e("i18n"),f=e("."),k=o("h2",{id:"emoji",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#emoji","aria-hidden":"true"},"#"),e(" emoji")],-1),b=o("ul",null,[o("li",null,[e("Type: "),o("code",null,"(string | EmojiInfo)[]")]),o("li",null,[e("Default: "),o("code",null,"['https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo']")])],-1),_=e("Emoji settings, for details see "),y=e("Custom Emoji"),w=t('<h2 id="dark" tabindex="-1"><a class="header-anchor" href="#dark" aria-hidden="true">#</a> dark</h2><ul><li>Type: <code>string | boolean</code></li><li>Default: <code>false</code></li></ul><p>Darkmode support</p><ul><li>Setting a boolean will set the dark mode according to its value.</li><li>Set it to <code>&#39;auto&#39;</code> will display darkmode due to device settings.</li><li>Filling in a CSS selector will enable darkmode only when the selector match waline ancestor nodes.</li></ul><div class="custom-container tip"><p class="custom-container-title">Examples</p><ul><li><p><strong>Docusaurus</strong>: It will enable darkmode by setting <code>data-theme=&quot;dark&quot;</code> on the <code>&lt;html&gt;</code> tag itself. So you need to set <code>&#39;html[data-theme=&quot;dark&quot;]&#39;</code> as <code>dark</code> option.</p></li><li><p><strong>hexo-theme-fluid</strong>: It will enable darkmode by setting <code>data-user-color-scheme=&quot;dark&quot;</code> on the <code>&lt;html&gt;</code> tag itself. So you need to set <code>&#39;html[data-user-color-scheme=&quot;dark&quot;]&#39;</code> as <code>dark</code> option.</p></li><li><p><strong>vuepress-theme-hope</strong>: It will enable darkmode by setting <code>theme-dark</code> class on the <code>&lt;body&gt;</code> tag itself. So you need to set <code>&#39;body.theme-dark&#39;</code> as <code>dark</code> option.</p></li></ul></div>',5),x=e("For details of custom style and darkmode, please see "),v=e("Custom Style"),T=e("."),q=t(`<h2 id="meta" tabindex="-1"><a class="header-anchor" href="#meta" aria-hidden="true">#</a> meta</h2><ul><li>Type: <code>string[]</code></li><li>Default: <code>[&#39;nick&#39;,&#39;mail&#39;,&#39;link&#39;]</code></li></ul><p>Reviewer attributes. Optional values: <code>&#39;nick&#39;</code>, <code>&#39;mail&#39;</code>, <code>&#39;link&#39;</code></p><h2 id="requiredmeta" tabindex="-1"><a class="header-anchor" href="#requiredmeta" aria-hidden="true">#</a> requiredMeta</h2><ul><li>Type: <code>string[]</code></li><li>Default: <code>[]</code></li></ul><p>Set required fields, default anonymous, optional values:</p><ul><li><code>[]</code></li><li><code>[&#39;nick&#39;]</code></li><li><code>[&#39;nick&#39;,&#39;mail&#39;]</code></li></ul><h2 id="login" tabindex="-1"><a class="header-anchor" href="#login" aria-hidden="true">#</a> login</h2><ul><li>Type: <code>string</code></li><li>Default value: <code>&#39;enable&#39;</code></li></ul><p>Login mode status, optional values:</p><ul><li><code>&#39;enable&#39;</code>: enable login (default)</li><li><code>&#39;disable&#39;</code>: Login is disabled, users should fill in infomation to comment</li><li><code>&#39;force&#39;</code>: Forced login, users must login to comment</li></ul><h2 id="wordlimit" tabindex="-1"><a class="header-anchor" href="#wordlimit" aria-hidden="true">#</a> wordLimit</h2><ul><li>Type: <code>number | [number, number]</code></li><li>Default: <code>0</code></li></ul><p>Comment word s limit. When a single number is filled in, it &#39;s the maximum number of comment words. No limit when set to <code>0</code>.</p><h2 id="pagesize" tabindex="-1"><a class="header-anchor" href="#pagesize" aria-hidden="true">#</a> pageSize</h2><ul><li>Type: <code>number</code></li><li>Default: <code>10</code></li></ul><p>number of comments per page.</p><h2 id="imageuploader" tabindex="-1"><a class="header-anchor" href="#imageuploader" aria-hidden="true">#</a> imageUploader</h2><ul><li>Type: <code>Function | false</code></li><li>Required: No</li></ul><p>Custom image upload callback to manage picture by yourself. We will pass a picture file object when execute it.</p><p>You can set to <code>false</code> to disable image uploading, the default behavior is to base 64 encode image then the embedded it.</p><h2 id="highlighter" tabindex="-1"><a class="header-anchor" href="#highlighter" aria-hidden="true">#</a> highlighter</h2><ul><li>Type: <code>Highlighter | false</code></li><li>Required: No</li></ul><p><strong>Code highlighting</strong>, <code>hanabi</code> is used by default, and you can pass in a code highlighter of your own.</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lang<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>

<span class="token comment">// or</span>

<span class="token punctuation">(</span>
  code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  lang<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  callback<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> code<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre></div><p>You can set it to <code>false</code> to disable the code highlighting.</p><h2 id="texrenderer" tabindex="-1"><a class="header-anchor" href="#texrenderer" aria-hidden="true">#</a> texRenderer</h2><ul><li>Type: <code>(blockMode: boolean, tex: string) =&gt; string | false</code></li><li>Required: No</li></ul>`,28),j=e("Custom the rendering method of math to facilitate better preview of math. For details, please refer to "),D={href:"https://katex.org/docs/api.html#server-side-rendering-or-rendering-to-a-string",target:"_blank",rel:"noopener noreferrer"},S=e("KaTeX API"),C=e(" or "),I={href:"http://docs.mathjax.org/en/latest/web/typeset.html#converting-a-math-string-to-other-formats",target:"_blank",rel:"noopener noreferrer"},N=e("MathJax API"),R=e("."),F=t('<p>If you set it to <code>false</code>, math preview feature will be disabled.</p><h2 id="copyright" tabindex="-1"><a class="header-anchor" href="#copyright" aria-hidden="true">#</a> copyright</h2><ul><li>Type: <code>boolean</code></li><li>Default: <code>true</code></li></ul><p>Whether show copyright and version in footer.</p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>We hope you can keep it on to support Waline.</p></div>',5);function L(z,E){const n=l("RouterLink"),s=l("ExternalLinkIcon");return c(),r(p,null,[h,o("p",null,[m,a(n,{to:"/en/guide/client/i18n.html"},{default:i(()=>[g]),_:1}),f]),k,b,o("p",null,[_,a(n,{to:"/en/guide/client/emoji.html"},{default:i(()=>[y]),_:1})]),w,o("p",null,[x,a(n,{to:"/en/guide/client/style.html"},{default:i(()=>[v]),_:1}),T]),q,o("p",null,[j,o("a",D,[S,a(s)]),C,o("a",I,[N,a(s)]),R]),F],64)}var P=d(u,[["render",L],["__file","component.html.vue"]]);export{P as default};
