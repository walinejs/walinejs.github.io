import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c as o,b as s,e as n,f as c,w as l,d as i}from"./app-g0bS3pUN.js";const r={},u=s("p",null,"Waline 虽然提供了基于用户系统存储的评论服务，但这套用户系统是 Waline 自己的。而很多第三方网站都有自己的用户系统，于是有一些小众用户有集成自己的用户系统到 Waline 中的诉求。",-1),k=i(`<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Application <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">model</span><span class="token punctuation">(</span><span class="token parameter">tableName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tableName <span class="token operator">!==</span> <span class="token string">&#39;Users&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>通过如上配置，我们就将 Waline 用户表的读取独立了出来。接下来我们要针对入参和出参做好字段映射，入参将字段映射回第三方系统中的表字段，出参则将第三方系统中的表字段再映射回 Waline 的字段即可。</p><p>如果你比较熟悉 TypeScript，可以参考下面的类型定义。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">strNum</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">UserFields</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token string">&#39;objectId&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;display_name&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;email&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;password&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;type&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;label&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;url&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;avatar&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;github&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;twitter&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;facebook&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;google&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;weibo&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;qq&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;2fa&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;createdAt&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;updatedAt&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">UserData</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>UserFields<span class="token punctuation">,</span> strNum<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">UsersWhere</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>UserFields<span class="token punctuation">,</span> strNum <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">&#39;IN&#39;</span><span class="token punctuation">,</span> strNum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">UsersOptions</span> <span class="token punctuation">{</span>
  field<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  desc<span class="token operator">?</span><span class="token operator">:</span> UserFields<span class="token punctuation">;</span>
  limit<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  offset<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">UsersModel</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">select</span><span class="token operator">:</span> <span class="token punctuation">(</span>where<span class="token operator">:</span> UsersWhere<span class="token punctuation">,</span> options<span class="token operator">:</span> UsersOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> UserData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>user<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>UserData<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> UserData<span class="token punctuation">;</span>
  <span class="token function-variable function">update</span><span class="token operator">:</span> <span class="token punctuation">(</span>user<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>UserData<span class="token operator">&gt;</span><span class="token punctuation">,</span> where<span class="token operator">:</span> UsersWhere<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> UserData<span class="token punctuation">;</span>
  <span class="token function-variable function">delete</span><span class="token operator">:</span> <span class="token punctuation">(</span>where<span class="token operator">:</span> UsersWhere<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function-variable function">count</span><span class="token operator">:</span> <span class="token punctuation">(</span>where<span class="token operator">:</span> UsersWhere<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">model</span><span class="token punctuation">(</span>modelName<span class="token punctuation">)</span><span class="token operator">:</span> UsersModel <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>modelName <span class="token operator">!==</span> <span class="token string">&#39;Users&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上仅能保证数据库的查询没有问题，但受限于密码的加密方式不同，Waline 内部的加密方式并不能和第三方网站中使用的加密方式一致。针对这种情况，你需要自定义密码加密和验证的方法。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> Application <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@waline/vercel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">encryptPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function">hashPassword</span><span class="token punctuation">(</span><span class="token parameter">password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token parameter">password<span class="token punctuation">,</span> storeHash</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>基于以上两个扩展能力，我们就能实现 Waline 使用第三方网站自己的用户系统了。</p>`,7);function d(m,v){const a=e("RouteLink");return p(),o("div",null,[u,s("p",null,[n("我们可以利用 "),c(a,{to:"/cookbook/customize/database.html"},{default:l(()=>[n("自定义数据库服务")]),_:1}),n(" 来实现这个功能，本质是做了底层表的映射。")]),k])}const f=t(r,[["render",d],["__file","userdb.html.vue"]]),y=JSON.parse('{"path":"/cookbook/customize/userdb.html","title":"自定义用户系统","lang":"zh-CN","frontmatter":{"title":"自定义用户系统","icon":"users","description":"Waline 虽然提供了基于用户系统存储的评论服务，但这套用户系统是 Waline 自己的。而很多第三方网站都有自己的用户系统，于是有一些小众用户有集成自己的用户系统到 Waline 中的诉求。 我们可以利用 来实现这个功能，本质是做了底层表的映射。 通过如上配置，我们就将 Waline 用户表的读取独立了出来。接下来我们要针对入参和出参做好字段映射，...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://waline.js.org/en/cookbook/customize/userdb.html"}],["meta",{"property":"og:url","content":"https://waline.js.org/cookbook/customize/userdb.html"}],["meta",{"property":"og:site_name","content":"Waline"}],["meta",{"property":"og:title","content":"自定义用户系统"}],["meta",{"property":"og:description","content":"Waline 虽然提供了基于用户系统存储的评论服务，但这套用户系统是 Waline 自己的。而很多第三方网站都有自己的用户系统，于是有一些小众用户有集成自己的用户系统到 Waline 中的诉求。 我们可以利用 来实现这个功能，本质是做了底层表的映射。 通过如上配置，我们就将 Waline 用户表的读取独立了出来。接下来我们要针对入参和出参做好字段映射，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-17T05:33:42.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-17T05:33:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义用户系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-17T05:33:42.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1681636169000,"updatedTime":1686980022000,"contributors":[{"name":"Austin Lee","email":"i@imnerd.org","commits":1},{"name":"lizheming","email":"i@imnerd.org","commits":1},{"name":"xunmeng","email":"liub1934@gmail.com","commits":1}]},"readingTime":{"minutes":1.51,"words":454},"filePathRelative":"cookbook/customize/userdb.md","localizedDate":"2023年4月16日","autoDesc":true}');export{f as comp,y as data};
